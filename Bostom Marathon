{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "fe98ac11-993d-408d-8952-9e9470cfaac7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a817698-f003-40df-8b3a-4d83983805e6",
   "metadata": {},
   "source": [
    "Let's recall the NBA salary data we were using last time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "80596429-1054-4a09-8e87-b420bc0cc7bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "bb=pd.read_csv('nba2022-23salary_small.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1013451d-28b7-45b7-a250-9b3ae28825a8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Player Name</th>\n",
       "      <th>Salary</th>\n",
       "      <th>Position</th>\n",
       "      <th>Age</th>\n",
       "      <th>Team</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Stephen Curry</td>\n",
       "      <td>48070014</td>\n",
       "      <td>PG</td>\n",
       "      <td>34</td>\n",
       "      <td>GSW</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>John Wall</td>\n",
       "      <td>47345760</td>\n",
       "      <td>PG</td>\n",
       "      <td>32</td>\n",
       "      <td>LAC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Russell Westbrook</td>\n",
       "      <td>47080179</td>\n",
       "      <td>PG</td>\n",
       "      <td>34</td>\n",
       "      <td>LAL/LAC</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>LeBron James</td>\n",
       "      <td>44474988</td>\n",
       "      <td>PF</td>\n",
       "      <td>38</td>\n",
       "      <td>LAL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Kevin Durant</td>\n",
       "      <td>44119845</td>\n",
       "      <td>PF</td>\n",
       "      <td>34</td>\n",
       "      <td>BRK/PHO</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Player Name    Salary Position  Age     Team\n",
       "0      Stephen Curry  48070014       PG   34      GSW\n",
       "1          John Wall  47345760       PG   32      LAC\n",
       "2  Russell Westbrook  47080179       PG   34  LAL/LAC\n",
       "3       LeBron James  44474988       PF   38      LAL\n",
       "4       Kevin Durant  44119845       PF   34  BRK/PHO"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bb.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a63fb13-45e1-4011-a8da-4d63f7dc58b8",
   "metadata": {},
   "source": [
    "We has asked some questions including:\n",
    "\n",
    "1. Relationship between position and salary.\n",
    "2. Relationship between age and salary."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b541d3a7-4b80-4a2e-849e-22b4713d78ec",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Position\n",
       "SG       115\n",
       "SF        91\n",
       "C         91\n",
       "PF        86\n",
       "PG        77\n",
       "PG-SG      2\n",
       "SF-SG      2\n",
       "SG-PG      2\n",
       "SF-PF      1\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bb['Position'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d9c9e9b-c5bd-421c-a5f8-2fdaacd6a76a",
   "metadata": {},
   "source": [
    "And we decided to recode the low-population position combos:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e109a894-e564-43a4-a225-2777a8807b2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "recode_mapping={\n",
    "            'PG-SG': 'PG',\n",
    "            'SF-SG': 'SF',\n",
    "            'SG-PG': 'SG',\n",
    "            'SF-PF': 'SF'\n",
    "        }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6c9cc0ac-b962-4566-8c50-2a2dacc7b902",
   "metadata": {},
   "outputs": [],
   "source": [
    "bb['Position']=bb['Position'].replace(recode_mapping)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7404bcc5-421d-4ec9-9599-7a9d7d9363cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on method replace in module pandas.core.generic:\n",
      "\n",
      "replace(\n",
      "    to_replace=None,\n",
      "    value=<no_default>,\n",
      "    *,\n",
      "    inplace: 'bool_t' = False,\n",
      "    limit: 'int | None' = None,\n",
      "    regex: 'bool_t' = False,\n",
      "    method: \"Literal['pad', 'ffill', 'bfill'] | lib.NoDefault\" = <no_default>\n",
      ") -> 'Self | None' method of pandas.core.series.Series instance\n",
      "    Replace values given in `to_replace` with `value`.\n",
      "\n",
      "    Values of the Series/DataFrame are replaced with other values dynamically.\n",
      "    This differs from updating with ``.loc`` or ``.iloc``, which require\n",
      "    you to specify a location to update with some value.\n",
      "\n",
      "    Parameters\n",
      "    ----------\n",
      "    to_replace : str, regex, list, dict, Series, int, float, or None\n",
      "        How to find the values that will be replaced.\n",
      "\n",
      "        * numeric, str or regex:\n",
      "\n",
      "            - numeric: numeric values equal to `to_replace` will be\n",
      "              replaced with `value`\n",
      "            - str: string exactly matching `to_replace` will be replaced\n",
      "              with `value`\n",
      "            - regex: regexs matching `to_replace` will be replaced with\n",
      "              `value`\n",
      "\n",
      "        * list of str, regex, or numeric:\n",
      "\n",
      "            - First, if `to_replace` and `value` are both lists, they\n",
      "              **must** be the same length.\n",
      "            - Second, if ``regex=True`` then all of the strings in **both**\n",
      "              lists will be interpreted as regexs otherwise they will match\n",
      "              directly. This doesn't matter much for `value` since there\n",
      "              are only a few possible substitution regexes you can use.\n",
      "            - str, regex and numeric rules apply as above.\n",
      "\n",
      "        * dict:\n",
      "\n",
      "            - Dicts can be used to specify different replacement values\n",
      "              for different existing values. For example,\n",
      "              ``{'a': 'b', 'y': 'z'}`` replaces the value 'a' with 'b' and\n",
      "              'y' with 'z'. To use a dict in this way, the optional `value`\n",
      "              parameter should not be given.\n",
      "            - For a DataFrame a dict can specify that different values\n",
      "              should be replaced in different columns. For example,\n",
      "              ``{'a': 1, 'b': 'z'}`` looks for the value 1 in column 'a'\n",
      "              and the value 'z' in column 'b' and replaces these values\n",
      "              with whatever is specified in `value`. The `value` parameter\n",
      "              should not be ``None`` in this case. You can treat this as a\n",
      "              special case of passing two lists except that you are\n",
      "              specifying the column to search in.\n",
      "            - For a DataFrame nested dictionaries, e.g.,\n",
      "              ``{'a': {'b': np.nan}}``, are read as follows: look in column\n",
      "              'a' for the value 'b' and replace it with NaN. The optional `value`\n",
      "              parameter should not be specified to use a nested dict in this\n",
      "              way. You can nest regular expressions as well. Note that\n",
      "              column names (the top-level dictionary keys in a nested\n",
      "              dictionary) **cannot** be regular expressions.\n",
      "\n",
      "        * None:\n",
      "\n",
      "            - This means that the `regex` argument must be a string,\n",
      "              compiled regular expression, or list, dict, ndarray or\n",
      "              Series of such elements. If `value` is also ``None`` then\n",
      "              this **must** be a nested dictionary or Series.\n",
      "\n",
      "        See the examples section for examples of each of these.\n",
      "    value : scalar, dict, list, str, regex, default None\n",
      "        Value to replace any values matching `to_replace` with.\n",
      "        For a DataFrame a dict of values can be used to specify which\n",
      "        value to use for each column (columns not in the dict will not be\n",
      "        filled). Regular expressions, strings and lists or dicts of such\n",
      "        objects are also allowed.\n",
      "\n",
      "    inplace : bool, default False\n",
      "        If True, performs operation inplace and returns None.\n",
      "    limit : int, default None\n",
      "        Maximum size gap to forward or backward fill.\n",
      "\n",
      "        .. deprecated:: 2.1.0\n",
      "    regex : bool or same types as `to_replace`, default False\n",
      "        Whether to interpret `to_replace` and/or `value` as regular\n",
      "        expressions. Alternatively, this could be a regular expression or a\n",
      "        list, dict, or array of regular expressions in which case\n",
      "        `to_replace` must be ``None``.\n",
      "    method : {'pad', 'ffill', 'bfill'}\n",
      "        The method to use when for replacement, when `to_replace` is a\n",
      "        scalar, list or tuple and `value` is ``None``.\n",
      "\n",
      "        .. deprecated:: 2.1.0\n",
      "\n",
      "    Returns\n",
      "    -------\n",
      "    Series/DataFrame\n",
      "        Object after replacement.\n",
      "\n",
      "    Raises\n",
      "    ------\n",
      "    AssertionError\n",
      "        * If `regex` is not a ``bool`` and `to_replace` is not\n",
      "          ``None``.\n",
      "\n",
      "    TypeError\n",
      "        * If `to_replace` is not a scalar, array-like, ``dict``, or ``None``\n",
      "        * If `to_replace` is a ``dict`` and `value` is not a ``list``,\n",
      "          ``dict``, ``ndarray``, or ``Series``\n",
      "        * If `to_replace` is ``None`` and `regex` is not compilable\n",
      "          into a regular expression or is a list, dict, ndarray, or\n",
      "          Series.\n",
      "        * When replacing multiple ``bool`` or ``datetime64`` objects and\n",
      "          the arguments to `to_replace` does not match the type of the\n",
      "          value being replaced\n",
      "\n",
      "    ValueError\n",
      "        * If a ``list`` or an ``ndarray`` is passed to `to_replace` and\n",
      "          `value` but they are not the same length.\n",
      "\n",
      "    See Also\n",
      "    --------\n",
      "    Series.fillna : Fill NA values.\n",
      "    DataFrame.fillna : Fill NA values.\n",
      "    Series.where : Replace values based on boolean condition.\n",
      "    DataFrame.where : Replace values based on boolean condition.\n",
      "    DataFrame.map: Apply a function to a Dataframe elementwise.\n",
      "    Series.map: Map values of Series according to an input mapping or function.\n",
      "    Series.str.replace : Simple string replacement.\n",
      "\n",
      "    Notes\n",
      "    -----\n",
      "    * Regex substitution is performed under the hood with ``re.sub``. The\n",
      "      rules for substitution for ``re.sub`` are the same.\n",
      "    * Regular expressions will only substitute on strings, meaning you\n",
      "      cannot provide, for example, a regular expression matching floating\n",
      "      point numbers and expect the columns in your frame that have a\n",
      "      numeric dtype to be matched. However, if those floating point\n",
      "      numbers *are* strings, then you can do this.\n",
      "    * This method has *a lot* of options. You are encouraged to experiment\n",
      "      and play with this method to gain intuition about how it works.\n",
      "    * When dict is used as the `to_replace` value, it is like\n",
      "      key(s) in the dict are the to_replace part and\n",
      "      value(s) in the dict are the value parameter.\n",
      "\n",
      "    Examples\n",
      "    --------\n",
      "\n",
      "    **Scalar `to_replace` and `value`**\n",
      "\n",
      "    >>> s = pd.Series([1, 2, 3, 4, 5])\n",
      "    >>> s.replace(1, 5)\n",
      "    0    5\n",
      "    1    2\n",
      "    2    3\n",
      "    3    4\n",
      "    4    5\n",
      "    dtype: int64\n",
      "\n",
      "    >>> df = pd.DataFrame({'A': [0, 1, 2, 3, 4],\n",
      "    ...                    'B': [5, 6, 7, 8, 9],\n",
      "    ...                    'C': ['a', 'b', 'c', 'd', 'e']})\n",
      "    >>> df.replace(0, 5)\n",
      "        A  B  C\n",
      "    0  5  5  a\n",
      "    1  1  6  b\n",
      "    2  2  7  c\n",
      "    3  3  8  d\n",
      "    4  4  9  e\n",
      "\n",
      "    **List-like `to_replace`**\n",
      "\n",
      "    >>> df.replace([0, 1, 2, 3], 4)\n",
      "        A  B  C\n",
      "    0  4  5  a\n",
      "    1  4  6  b\n",
      "    2  4  7  c\n",
      "    3  4  8  d\n",
      "    4  4  9  e\n",
      "\n",
      "    >>> df.replace([0, 1, 2, 3], [4, 3, 2, 1])\n",
      "        A  B  C\n",
      "    0  4  5  a\n",
      "    1  3  6  b\n",
      "    2  2  7  c\n",
      "    3  1  8  d\n",
      "    4  4  9  e\n",
      "\n",
      "    >>> s.replace([1, 2], method='bfill')\n",
      "    0    3\n",
      "    1    3\n",
      "    2    3\n",
      "    3    4\n",
      "    4    5\n",
      "    dtype: int64\n",
      "\n",
      "    **dict-like `to_replace`**\n",
      "\n",
      "    >>> df.replace({0: 10, 1: 100})\n",
      "            A  B  C\n",
      "    0   10  5  a\n",
      "    1  100  6  b\n",
      "    2    2  7  c\n",
      "    3    3  8  d\n",
      "    4    4  9  e\n",
      "\n",
      "    >>> df.replace({'A': 0, 'B': 5}, 100)\n",
      "            A    B  C\n",
      "    0  100  100  a\n",
      "    1    1    6  b\n",
      "    2    2    7  c\n",
      "    3    3    8  d\n",
      "    4    4    9  e\n",
      "\n",
      "    >>> df.replace({'A': {0: 100, 4: 400}})\n",
      "            A  B  C\n",
      "    0  100  5  a\n",
      "    1    1  6  b\n",
      "    2    2  7  c\n",
      "    3    3  8  d\n",
      "    4  400  9  e\n",
      "\n",
      "    **Regular expression `to_replace`**\n",
      "\n",
      "    >>> df = pd.DataFrame({'A': ['bat', 'foo', 'bait'],\n",
      "    ...                    'B': ['abc', 'bar', 'xyz']})\n",
      "    >>> df.replace(to_replace=r'^ba.$', value='new', regex=True)\n",
      "            A    B\n",
      "    0   new  abc\n",
      "    1   foo  new\n",
      "    2  bait  xyz\n",
      "\n",
      "    >>> df.replace({'A': r'^ba.$'}, {'A': 'new'}, regex=True)\n",
      "            A    B\n",
      "    0   new  abc\n",
      "    1   foo  bar\n",
      "    2  bait  xyz\n",
      "\n",
      "    >>> df.replace(regex=r'^ba.$', value='new')\n",
      "            A    B\n",
      "    0   new  abc\n",
      "    1   foo  new\n",
      "    2  bait  xyz\n",
      "\n",
      "    >>> df.replace(regex={r'^ba.$': 'new', 'foo': 'xyz'})\n",
      "            A    B\n",
      "    0   new  abc\n",
      "    1   xyz  new\n",
      "    2  bait  xyz\n",
      "\n",
      "    >>> df.replace(regex=[r'^ba.$', 'foo'], value='new')\n",
      "            A    B\n",
      "    0   new  abc\n",
      "    1   new  new\n",
      "    2  bait  xyz\n",
      "\n",
      "    Compare the behavior of ``s.replace({'a': None})`` and\n",
      "    ``s.replace('a', None)`` to understand the peculiarities\n",
      "    of the `to_replace` parameter:\n",
      "\n",
      "    >>> s = pd.Series([10, 'a', 'a', 'b', 'a'])\n",
      "\n",
      "    When one uses a dict as the `to_replace` value, it is like the\n",
      "    value(s) in the dict are equal to the `value` parameter.\n",
      "    ``s.replace({'a': None})`` is equivalent to\n",
      "    ``s.replace(to_replace={'a': None}, value=None, method=None)``:\n",
      "\n",
      "    >>> s.replace({'a': None})\n",
      "    0      10\n",
      "    1    None\n",
      "    2    None\n",
      "    3       b\n",
      "    4    None\n",
      "    dtype: object\n",
      "\n",
      "    When ``value`` is not explicitly passed and `to_replace` is a scalar, list\n",
      "    or tuple, `replace` uses the method parameter (default 'pad') to do the\n",
      "    replacement. So this is why the 'a' values are being replaced by 10\n",
      "    in rows 1 and 2 and 'b' in row 4 in this case.\n",
      "\n",
      "    >>> s.replace('a')\n",
      "    0    10\n",
      "    1    10\n",
      "    2    10\n",
      "    3     b\n",
      "    4     b\n",
      "    dtype: object\n",
      "\n",
      "        .. deprecated:: 2.1.0\n",
      "            The 'method' parameter and padding behavior are deprecated.\n",
      "\n",
      "    On the other hand, if ``None`` is explicitly passed for ``value``, it will\n",
      "    be respected:\n",
      "\n",
      "    >>> s.replace('a', None)\n",
      "    0      10\n",
      "    1    None\n",
      "    2    None\n",
      "    3       b\n",
      "    4    None\n",
      "    dtype: object\n",
      "\n",
      "        .. versionchanged:: 1.4.0\n",
      "            Previously the explicit ``None`` was silently ignored.\n",
      "\n",
      "    When ``regex=True``, ``value`` is not ``None`` and `to_replace` is a string,\n",
      "    the replacement will be applied in all columns of the DataFrame.\n",
      "\n",
      "    >>> df = pd.DataFrame({'A': [0, 1, 2, 3, 4],\n",
      "    ...                    'B': ['a', 'b', 'c', 'd', 'e'],\n",
      "    ...                    'C': ['f', 'g', 'h', 'i', 'j']})\n",
      "\n",
      "    >>> df.replace(to_replace='^[a-g]', value='e', regex=True)\n",
      "        A  B  C\n",
      "    0  0  e  e\n",
      "    1  1  e  e\n",
      "    2  2  e  h\n",
      "    3  3  e  i\n",
      "    4  4  e  j\n",
      "\n",
      "    If ``value`` is not ``None`` and `to_replace` is a dictionary, the dictionary\n",
      "    keys will be the DataFrame columns that the replacement will be applied.\n",
      "\n",
      "    >>> df.replace(to_replace={'B': '^[a-c]', 'C': '^[h-j]'}, value='e', regex=True)\n",
      "        A  B  C\n",
      "    0  0  e  f\n",
      "    1  1  e  g\n",
      "    2  2  e  e\n",
      "    3  3  d  e\n",
      "    4  4  e  e\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(bb['Position'].replace)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1d9f2c70-2702-40a2-929a-227cb65b3c35",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Position\n",
       "SG    117\n",
       "SF     94\n",
       "C      91\n",
       "PF     86\n",
       "PG     79\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bb['Position'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27cc4ea2-bd5c-4753-9802-591a63d480e5",
   "metadata": {},
   "source": [
    "We also saw that the distribution of salaries tends to be very right skewed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d1dd2b94-333f-4d07-924f-3ceef8594f76",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "bb.loc[bb['Position']=='SF']['Salary'].hist(bins=15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "403fa03a-3dce-4d36-b0c4-646eae890dd8",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "bb.loc[bb['Position']=='PG']['Salary'].hist(bins=15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "8643964d-0d71-44ad-a102-7b11a2072e1f",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "bb.loc[bb['Position']=='C']['Salary'].hist(bins=15)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "47d53370-b44c-4253-a700-ed917539b1a9",
   "metadata": {},
   "source": [
    "A consequence is that the mean is pulled to the right by outliers. The median might be a more reasonable measure of center because it is *resistant* to the pull of outliers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "14c348ee-90a4-4a2f-a1cc-ac4ecaf40bb7",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    4.670000e+02\n",
       "mean     8.416599e+06\n",
       "std      1.070812e+07\n",
       "min      5.849000e+03\n",
       "25%      1.782621e+06\n",
       "50%      3.722040e+06\n",
       "75%      1.063354e+07\n",
       "max      4.807001e+07\n",
       "Name: Salary, dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bb['Salary'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "4ffd88f9-4f35-41bf-8902-2d0518eeeb38",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [],
   "source": [
    "bb['SalaryM']=bb['Salary']/1000000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f1b0d50e-cd50-43fd-b616-14b56a9e7d13",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    467.000000\n",
       "mean       8.416599\n",
       "std       10.708118\n",
       "min        0.005849\n",
       "25%        1.782621\n",
       "50%        3.722040\n",
       "75%       10.633544\n",
       "max       48.070014\n",
       "Name: SalaryM, dtype: float64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bb['SalaryM'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffcad656-0296-4a92-ad03-a45da7535acb",
   "metadata": {},
   "source": [
    "The `.describe()` method is a great way to get summary statistics for a quantitative column."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7395b61d-b144-4930-96f5-2cf358500e5c",
   "metadata": {},
   "source": [
    "We can see that the mean is much larger than the median, pulled out by the right tail of the salary distribution."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39d22c4f-0896-42c6-a386-cd68714cfd05",
   "metadata": {},
   "source": [
    "We also said that we often want to understand the measure of *spread*: How spread out around the middle is the data.  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fdee3bb7-fff1-479b-81a2-711c5a78f2f0",
   "metadata": {},
   "source": [
    "The *standard deviation* (given in the table created by the `.describe` method) is the measure of spread relative to the mean."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a38e52d2-0326-4dc2-ad65-a9c486d7499a",
   "metadata": {},
   "source": [
    "If we prefer the median as our measure of center then a boxplot is a nice way to visualize the spread. It shows the min, max, and three *quartiles*."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64168521-428c-4d01-8fb1-cb0b8c166bb8",
   "metadata": {},
   "source": [
    "Quartiles: \n",
    "\n",
    "1st quartile is the value below which we have 25% of the data.\n",
    "\n",
    "2nd quartile is the median: 50% of the data below.\n",
    "\n",
    "3rd quartile is the value below which we have 75% of the data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ff523eb-9afa-4cc9-a8f0-987c8f41f9a2",
   "metadata": {},
   "source": [
    "5 number summary:\n",
    "\n",
    "min ---- Q1 ---- M ---- Q3 ---- max"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "606257b6-9be9-4f87-9e69-f821179ccc6f",
   "metadata": {},
   "source": [
    "All in the box plot. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b022f325-4e72-4e37-aead-e01e2a1033e4",
   "metadata": {},
   "source": [
    "Define: IQR = interquartile range = Q3-Q1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "701c037e-ee11-4e10-afd4-06eba0c68db5",
   "metadata": {},
   "source": [
    "Outlier: an observation more than 1.5*IQR above or below the median."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6f7ee9f0-a38c-40bb-aafc-c1ad80dab5ec",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "bb.boxplot('Salary')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "f60a2cc7-9865-435d-8f1a-8b4dd460bd64",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: title={'center': 'Salary'}, xlabel='Position'>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "bb.boxplot('Salary',by='Position')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a84a2aa6-e9ae-4349-b6a2-5e9b5f2b605f",
   "metadata": {},
   "source": [
    "Note: If $k$ is a number between 1 and 99 then the $k$-th percentile is the value below which we have $k\\%$ of the data."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65b8a38f-ea38-4cb1-ba63-7f151768043a",
   "metadata": {},
   "source": [
    "Example: $k$=90: use the `.quantile()` method with input $k/100$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "42b2fdec-e404-4504-b583-dcc5949078dd",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "np.float64(26.083880800000024)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bb['SalaryM'].quantile(0.90)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3c794d1c-e010-402e-8133-a70db7ad8357",
   "metadata": {},
   "source": [
    "OK: We broke down `Salary` by the categorical variable `Position`."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "393b6c1d-d4c1-4752-885e-3a9007f2a3a3",
   "metadata": {},
   "source": [
    "Sometimes we are interested in the relationship between two quantitative variables. FOr example, for each player I can observe: \n",
    "\n",
    "Age of player = $x$\n",
    "\n",
    "Salary of player = $y$\n",
    "\n",
    "and plot $(x,y)$ for each player."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4ba2dd4-5315-4162-b839-bdae45dac24b",
   "metadata": {},
   "source": [
    "Use the `.scatterplot` method on the dataframe and tell python what $x$ and $y$ are. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "dd95587d-cdbb-4b64-b5dd-9c28f33ca240",
   "metadata": {
    "jupyter": {
     "source_hidden": true
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='Age', ylabel='SalaryM'>"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "bb.plot.scatter(x='Age',y='SalaryM')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afe78833-480a-47ae-8ec3-c443ce980ae4",
   "metadata": {},
   "source": [
    "Lots to talk about here... more on that later. For now, does it seem reasonable to say that while there is a lot of salary variability across all values of age, it does seem that on average salaries increase a bit with age. This is a stats question."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "683cd75f-283c-4563-9915-13eb0be50fe4",
   "metadata": {},
   "source": [
    "One more example of how to make visuals. Say we wanted to display two histograms on the same plot. Ex: Compare PGs and Cs."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "390f1b25-3ff7-46ea-81b7-a417a27f9dcf",
   "metadata": {},
   "source": [
    "We can first create the subsets we are interested in. Then create histograms using the `plt` object from `matplotlib`. Then show them together. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "2af0795f-8a6d-4cc8-81b2-6e2345bb1039",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(bb.loc[(bb['Position']=='PG')]['SalaryM'], alpha=0.5, label='Point Guards', bins=15)\n",
    "plt.hist(bb.loc[(bb['Position']=='C')]['SalaryM'], alpha=0.5, label='Centers', bins=15)\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dac279e0-05db-4584-a32d-a5ee8216dec1",
   "metadata": {},
   "source": [
    "Note: The `alpha` parameter creates transparancy so we can see both histograms when they overlap. The `plt.legend()` creates the label box in the upper right corner."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d249f2c1-f642-4cc2-91de-0bfd9b782ba8",
   "metadata": {},
   "source": [
    "This is our first foray into `matplotlib`. It gives us lots of fine-grained control over images but has kind of dense and mysterious syntax."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4014713d-607d-45ab-a361-abf08634df76",
   "metadata": {},
   "source": [
    "### Functions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "185c7e77-4563-4a5d-8555-a04b027225b7",
   "metadata": {},
   "source": [
    "We've worked with functions: input/output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "112131cf-b554-451f-b2cb-002c325c6f50",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len([1,2,3,4,5,6,7,8])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "67eb5a42-f75c-4c25-8150-b93c842c0f29",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "max([-800,0,3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5e960c51-8d4a-4f74-b820-14daa4020061",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-800"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "min([-800,0,3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "3ff04ebe-94e3-4bc9-bcc2-1f5ddc75ad07",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2, 3)"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "divmod(11,4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6612409f-f60c-42d7-bbb2-72c8c53692b5",
   "metadata": {},
   "source": [
    "Here, there are two inputs and two outputs."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef781b68-bfbc-4380-baba-3664601e335e",
   "metadata": {},
   "source": [
    "Sometimes we need/want our own functions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "cdeb359a-0722-420f-9692-cf83667f0614",
   "metadata": {},
   "outputs": [],
   "source": [
    "def cube_plus(x):\n",
    "    ''' \n",
    "    This function will take an input of x, cube it, and 1, and\n",
    "    return the result.\n",
    "    '''\n",
    "    return x**3+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "f7acf97b-a034-4666-a3d3-a5f1f631ecf8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1001"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cube_plus(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e7f11867-4a80-4768-a3c4-2ef035003779",
   "metadata": {},
   "outputs": [],
   "source": [
    "def pct_tot(part,whole):\n",
    "    \"\"\"\n",
    "    Compute part as a percent of whole and \n",
    "    return the resulting percentage.\n",
    "    \"\"\"\n",
    "    return (part/whole)*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "657ba92c-34e7-406c-9de0-71bb143eb922",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.5"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pct_tot(11,200)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e20ed70-35bc-4f0e-96ed-edeabf1a14ea",
   "metadata": {},
   "source": [
    "And sometimes we want to apply a function to every column of a data frame. We've seen some ways to do that when the functions are familiar (like subtract and divide etc.)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "28eb493a-ac7a-4851-b0cb-b5bffa2867ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "35be426f-cfce-48d1-8278-960bcbbed213",
   "metadata": {},
   "outputs": [],
   "source": [
    "ht=pd.read_csv('FamilyHeightData.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "4c29a2b0-4335-4d8f-b7b6-4aef7533f3da",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>family</th>\n",
       "      <th>children</th>\n",
       "      <th>childNum</th>\n",
       "      <th>gender</th>\n",
       "      <th>MotherHt</th>\n",
       "      <th>FatherHt</th>\n",
       "      <th>ChildHt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>male</td>\n",
       "      <td>5-7.0</td>\n",
       "      <td>6-6.5</td>\n",
       "      <td>6-1.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>female</td>\n",
       "      <td>5-7.0</td>\n",
       "      <td>6-6.5</td>\n",
       "      <td>5-9.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>5-7.0</td>\n",
       "      <td>6-6.5</td>\n",
       "      <td>5-9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>female</td>\n",
       "      <td>5-7.0</td>\n",
       "      <td>6-6.5</td>\n",
       "      <td>5-9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>male</td>\n",
       "      <td>5-6.5</td>\n",
       "      <td>6-3.5</td>\n",
       "      <td>6-1.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  family  children  childNum  gender MotherHt FatherHt ChildHt\n",
       "0      1         4         1    male    5-7.0    6-6.5   6-1.2\n",
       "1      1         4         2  female    5-7.0    6-6.5   5-9.2\n",
       "2      1         4         3  female    5-7.0    6-6.5   5-9.0\n",
       "3      1         4         4  female    5-7.0    6-6.5   5-9.0\n",
       "4      2         4         1    male    5-6.5    6-3.5   6-1.5"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ht.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "a3c381de-bafb-4940-afdf-458d6f9c9e01",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(934, 7)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ht.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2d1e1cf-fead-4d2e-a310-a0cd40112fd4",
   "metadata": {},
   "source": [
    "This data set gives 934 observations on the height of adult children and the corresponding heights of their parents. The researcher was interested in the relationship between how height is passed to future generations genetically.  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74f90272-efd1-4d40-82d3-935efa86860c",
   "metadata": {},
   "source": [
    "Let's compute the average of the `ChildHt` column."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "12fdf79c-3578-42f2-ad43-7ad0bc74ac9d",
   "metadata": {},
   "source": [
    "Go ahead and do it!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "7fc67f39-a3c3-4071-b786-1de38bc15524",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "family      object\n",
       "children     int64\n",
       "childNum     int64\n",
       "gender      object\n",
       "MotherHt    object\n",
       "FatherHt    object\n",
       "ChildHt     object\n",
       "dtype: object"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ht.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "26c63465-d50e-41ef-b399-4f9b1fd0e271",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      6-1.2\n",
       "1      5-9.2\n",
       "2      5-9.0\n",
       "3      5-9.0\n",
       "4      6-1.5\n",
       "       ...  \n",
       "929    5-4.0\n",
       "930    5-2.0\n",
       "931    5-1.0\n",
       "932    5-6.5\n",
       "933    4-9.0\n",
       "Name: ChildHt, Length: 934, dtype: object"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ht['ChildHt']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "f137303c-3cc0-45f2-ad16-f298abe8f733",
   "metadata": {},
   "outputs": [],
   "source": [
    "def fix_ht(string):\n",
    "    '''\n",
    "    Input a height as a string like '6-3'\n",
    "    Return the height in inches\n",
    "    '''\n",
    "    xs = string.split('-')\n",
    "    inches = int(xs[0]) * 12 + float(xs[1])\n",
    "    return inches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "445301b0-d4ab-4cbb-acf5-8f521315534f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x=ht['ChildHt'][0]\n",
    "xs = x.split('-')\n",
    "int(xs[0])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "73a4811e-ccbe-435e-ba41-e83a449e612d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "73.2"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fix_ht(ht['ChildHt'][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3ae3a024-6a7e-4060-86f3-efbbdc333776",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "345c7f79-c792-4539-921a-8f2b708dc8fb",
   "metadata": {},
   "source": [
    "Oops!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "2666c110-1c65-42ac-89ba-1923ba5ee684",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "family      object\n",
       "children     int64\n",
       "childNum     int64\n",
       "gender      object\n",
       "MotherHt    object\n",
       "FatherHt    object\n",
       "ChildHt     object\n",
       "dtype: object"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ht.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5a33bfb8-75d3-4787-9d65-a3bc29d7c9be",
   "metadata": {},
   "source": [
    "The height columns are not numerical data because of the format."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ac917432-9527-4060-83eb-cbae89510885",
   "metadata": {},
   "source": [
    "We'd like to convert the \"feet-inches\" format to inches. Let's try to write a function that will do that and then see how we can apply that function to all the rows of the dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "7ae435fc-1dbd-438a-b587-1e7bc99c7cfc",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (676218416.py, line 6)",
     "output_type": "error",
     "traceback": [
      "  \u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[38]\u001b[39m\u001b[32m, line 6\u001b[39m\n\u001b[31m    \u001b[39m\u001b[31mreturn ????\u001b[39m\n           ^\n\u001b[31mSyntaxError\u001b[39m\u001b[31m:\u001b[39m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "def fix_ht(strval):\n",
    "    '''\n",
    "    Input a height as a string like '6-3'\n",
    "    Return the height in inches like 75.\n",
    "    '''\n",
    "    return ????"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "0e500a9e-4c04-46a5-95f0-3f17b5bc5992",
   "metadata": {},
   "outputs": [],
   "source": [
    "x=ht['ChildHt'][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "bc9736dc-aabe-45a7-850f-80feb3ceaddd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "str"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "22cd9f19-a117-40a7-a441-210aef9ba563",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['6', '1.2']"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.split('-')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "e0be2832-734b-46ae-8a3e-2210e78b5ce6",
   "metadata": {},
   "outputs": [],
   "source": [
    "xs=x.split('-')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "abd573c6-a21a-44c5-94c5-320a1e4bff66",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6 , 1.2\n"
     ]
    }
   ],
   "source": [
    "print(xs[0],\",\",xs[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "1ab6afc3-7d6a-40da-b4c9-956d16dc4d5f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "int(xs[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "861014ba-1aff-4d27-881d-a66890328422",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.2"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "float(xs[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "702451f8-a2c0-44ff-a3c2-16bcf7d1d529",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "73.2"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "int(xs[0])*12+float(xs[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "eb4e6134-0966-4b4d-8ba4-82e2414a586e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def fix_ht(strval):\n",
    "    '''\n",
    "    Input a height as a string like '6-3'\n",
    "    Return the height in inches like 75.\n",
    "    '''\n",
    "    x=strval.split(\"-\")\n",
    "    return 12*int(x[0])+float(x[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "09d94ac9-2c17-48e4-8ad8-6167f4a90d48",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "69.2"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fix_ht(ht['ChildHt'][1])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd5b0276-f854-4ba9-9450-ad881a7ead77",
   "metadata": {},
   "source": [
    "Now: apply this function to every row: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "fa9aa8d7-5ac7-4e34-939d-a8591a5c615b",
   "metadata": {},
   "outputs": [],
   "source": [
    "ht['ChildHt_inches']=ht['ChildHt'].apply(fix_ht)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "1c4f9783-14a7-4276-b1db-5fdba79f380d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>family</th>\n",
       "      <th>children</th>\n",
       "      <th>childNum</th>\n",
       "      <th>gender</th>\n",
       "      <th>MotherHt</th>\n",
       "      <th>FatherHt</th>\n",
       "      <th>ChildHt</th>\n",
       "      <th>ChildHt_inches</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>male</td>\n",
       "      <td>5-7.0</td>\n",
       "      <td>6-6.5</td>\n",
       "      <td>6-1.2</td>\n",
       "      <td>73.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>female</td>\n",
       "      <td>5-7.0</td>\n",
       "      <td>6-6.5</td>\n",
       "      <td>5-9.2</td>\n",
       "      <td>69.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>5-7.0</td>\n",
       "      <td>6-6.5</td>\n",
       "      <td>5-9.0</td>\n",
       "      <td>69.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>female</td>\n",
       "      <td>5-7.0</td>\n",
       "      <td>6-6.5</td>\n",
       "      <td>5-9.0</td>\n",
       "      <td>69.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>male</td>\n",
       "      <td>5-6.5</td>\n",
       "      <td>6-3.5</td>\n",
       "      <td>6-1.5</td>\n",
       "      <td>73.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  family  children  childNum  gender MotherHt FatherHt ChildHt  ChildHt_inches\n",
       "0      1         4         1    male    5-7.0    6-6.5   6-1.2            73.2\n",
       "1      1         4         2  female    5-7.0    6-6.5   5-9.2            69.2\n",
       "2      1         4         3  female    5-7.0    6-6.5   5-9.0            69.0\n",
       "3      1         4         4  female    5-7.0    6-6.5   5-9.0            69.0\n",
       "4      2         4         1    male    5-6.5    6-3.5   6-1.5            73.5"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ht.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17380b73-667e-4e0b-aaf5-f862ae2c9845",
   "metadata": {},
   "source": [
    "Great! Now do the same for mom & dad:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "85822317-498b-4529-883f-5f2ad3e2a961",
   "metadata": {},
   "outputs": [],
   "source": [
    "ht['FatherHt_inches']=ht['FatherHt'].apply(fix_ht)\n",
    "ht['MotherHt_inches']=ht['MotherHt'].apply(fix_ht)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "26d7cc35-2159-43b7-a6b6-26d83a4c6377",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>family</th>\n",
       "      <th>children</th>\n",
       "      <th>childNum</th>\n",
       "      <th>gender</th>\n",
       "      <th>MotherHt</th>\n",
       "      <th>FatherHt</th>\n",
       "      <th>ChildHt</th>\n",
       "      <th>ChildHt_inches</th>\n",
       "      <th>FatherHt_inches</th>\n",
       "      <th>MotherHt_inches</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>male</td>\n",
       "      <td>5-7.0</td>\n",
       "      <td>6-6.5</td>\n",
       "      <td>6-1.2</td>\n",
       "      <td>73.2</td>\n",
       "      <td>78.5</td>\n",
       "      <td>67.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>female</td>\n",
       "      <td>5-7.0</td>\n",
       "      <td>6-6.5</td>\n",
       "      <td>5-9.2</td>\n",
       "      <td>69.2</td>\n",
       "      <td>78.5</td>\n",
       "      <td>67.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>female</td>\n",
       "      <td>5-7.0</td>\n",
       "      <td>6-6.5</td>\n",
       "      <td>5-9.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>78.5</td>\n",
       "      <td>67.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>female</td>\n",
       "      <td>5-7.0</td>\n",
       "      <td>6-6.5</td>\n",
       "      <td>5-9.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>78.5</td>\n",
       "      <td>67.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>male</td>\n",
       "      <td>5-6.5</td>\n",
       "      <td>6-3.5</td>\n",
       "      <td>6-1.5</td>\n",
       "      <td>73.5</td>\n",
       "      <td>75.5</td>\n",
       "      <td>66.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  family  children  childNum  gender MotherHt FatherHt ChildHt  \\\n",
       "0      1         4         1    male    5-7.0    6-6.5   6-1.2   \n",
       "1      1         4         2  female    5-7.0    6-6.5   5-9.2   \n",
       "2      1         4         3  female    5-7.0    6-6.5   5-9.0   \n",
       "3      1         4         4  female    5-7.0    6-6.5   5-9.0   \n",
       "4      2         4         1    male    5-6.5    6-3.5   6-1.5   \n",
       "\n",
       "   ChildHt_inches  FatherHt_inches  MotherHt_inches  \n",
       "0            73.2             78.5             67.0  \n",
       "1            69.2             78.5             67.0  \n",
       "2            69.0             78.5             67.0  \n",
       "3            69.0             78.5             67.0  \n",
       "4            73.5             75.5             66.5  "
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ht.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1cb5798c-40f7-4584-a816-a270a7f1a63c",
   "metadata": {},
   "source": [
    "By the way, if we wanted to consider the researcher's motivating question we might want to look at scatterplots and averages. Also, we might want to use a combined parent height like the average of the mom and dad height."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "a2d6610c-eaab-4a60-b855-e91cf81acfe3",
   "metadata": {},
   "outputs": [],
   "source": [
    "ht['ParentAvg']=(ht['FatherHt_inches']+ht['MotherHt_inches'])/2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "802a57ff-ece1-4e71-a91b-d4fc3e91bf2a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='ParentAvg', ylabel='ChildHt_inches'>"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ht.plot.scatter(x='ParentAvg',y='ChildHt_inches')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f59b18bc-e5bb-4346-a14b-994363ffa4ed",
   "metadata": {},
   "source": [
    "We might want to deal with `gender` category."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56b98379-9340-4529-b2db-a7af65b9632a",
   "metadata": {},
   "source": [
    "We'll come back to this but it's possible:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "09c9c933-56f5-4a05-a2cb-134bc9b9e4bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "colors = ht['gender'].map({'male': 'red', 'female': 'blue'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "1e36142d-e643-4772-9a76-57bc12516bfb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='ParentAvg', ylabel='ChildHt_inches'>"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ht.plot.scatter(x='ParentAvg', y='ChildHt_inches', c=colors, alpha=0.7)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "257145ad-c0b0-4e15-9538-bf49499d500b",
   "metadata": {},
   "source": [
    "## Lab time"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6cee68fe-8ee9-479e-a2a7-68ffcf3a2fad",
   "metadata": {},
   "source": [
    "1. Input the boston marathon dataset.\n",
    "\n",
    "   This is the results of the 2025 Boston marathon run on April 21, 2025. Typically finishing times are    reported in hours, minutes, and seconds. \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    Note: You might get an error along the lines of:\n",
    "\n",
    "   `UnicodeDecodeError: 'utf-8' codec can't decode byte 0xf6 in position 35567: invalid start byte`\n",
    "\n",
    "   That means there are special characters in the data set (like accents) that the default readere doesn't      know what to do with. Try:\n",
    "\n",
    "   `bm=pd.read_csv('data/Boston2025_results.csv',encoding='latin-1')`\n",
    "\n",
    "2. Compute the average finishing time. You might need to fix the `OfficialTime` column.\n",
    "\n",
    "3. Find the average time for men.\n",
    "\n",
    "4. Find the average time for women.\n",
    "\n",
    "5. Display two histograms, one showing the finishing times for men and one for women, on the same plot.\n",
    "\n",
    "6. How would you describe the distribution of finishing times? Does the distribution change dramatically between men and women?\n",
    "\n",
    "7. Find the 90th percentile finishing time for women.\n",
    "\n",
    "8. The Boston marathon has age groups. One such group is age 50-54. Find summary statistics for men and women (separately) in the 50-54 age group. (Mean, Median, Quartiles, Standard deviation.)\n",
    "\n",
    "9. Make a boxplot of the Official Time in the 50-54 age group broken down by men and women.\n",
    "\n",
    "10. Find the fastest and slowest US states. Use the `StateAbbrev` column. Get rid of all the Canadian Provinces and territories. You might want/need to get a list of all `StateAbbrev` values using `bm['StateAbbrev'].unique().to_list()` and then use the `.isin()` method.\n",
    "\n",
    "11. Compare Massachusetts to California in terms of Official Time. Make a case for which state had faster runners. Make a boxplot that displays information relevant to your comparison. \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "018159fc-130c-400e-9e50-5e2bbfcd0935",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BibNumber</th>\n",
       "      <th>FullName</th>\n",
       "      <th>SortName</th>\n",
       "      <th>AgeOnRaceDay</th>\n",
       "      <th>Gender</th>\n",
       "      <th>City</th>\n",
       "      <th>StateAbbrev</th>\n",
       "      <th>StateName</th>\n",
       "      <th>Zip</th>\n",
       "      <th>CountryOfResAbbrev</th>\n",
       "      <th>CountryOfResName</th>\n",
       "      <th>CountryOfCtzAbbrev</th>\n",
       "      <th>CountryOfCtzName</th>\n",
       "      <th>OfficialTime</th>\n",
       "      <th>RankOverall</th>\n",
       "      <th>RankOverGender</th>\n",
       "      <th>RankOverDivision</th>\n",
       "      <th>EventGroup</th>\n",
       "      <th>SubGroupLabel</th>\n",
       "      <th>SubGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>John Korir</td>\n",
       "      <td>Korir, John</td>\n",
       "      <td>28</td>\n",
       "      <td>M</td>\n",
       "      <td>Eldoret</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>KEN</td>\n",
       "      <td>Kenya</td>\n",
       "      <td>KEN</td>\n",
       "      <td>Kenya</td>\n",
       "      <td>2:04:45</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Runners</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7</td>\n",
       "      <td>Alphonce Felix Simbu</td>\n",
       "      <td>Simbu, Alphonce Felix</td>\n",
       "      <td>33</td>\n",
       "      <td>M</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>TAN</td>\n",
       "      <td>Tanzania</td>\n",
       "      <td>TAN</td>\n",
       "      <td>Tanzania</td>\n",
       "      <td>2:05:04</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Runners</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>Cybrian Kotut</td>\n",
       "      <td>Kotut, Cybrian</td>\n",
       "      <td>32</td>\n",
       "      <td>M</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>KEN</td>\n",
       "      <td>Kenya</td>\n",
       "      <td>KEN</td>\n",
       "      <td>Kenya</td>\n",
       "      <td>2:05:04</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Runners</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>18</td>\n",
       "      <td>Conner Mantz</td>\n",
       "      <td>Mantz, Conner</td>\n",
       "      <td>28</td>\n",
       "      <td>M</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>USA</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>USA</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>2:05:08</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Runners</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>39</td>\n",
       "      <td>Muktar Edris</td>\n",
       "      <td>Edris, Muktar</td>\n",
       "      <td>31</td>\n",
       "      <td>M</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>ETH</td>\n",
       "      <td>Ethiopia</td>\n",
       "      <td>ETH</td>\n",
       "      <td>Ethiopia</td>\n",
       "      <td>2:05:59</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Runners</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  BibNumber              FullName               SortName  AgeOnRaceDay Gender  \\\n",
       "0         2            John Korir            Korir, John            28      M   \n",
       "1         7  Alphonce Felix Simbu  Simbu, Alphonce Felix            33      M   \n",
       "2         4         Cybrian Kotut         Kotut, Cybrian            32      M   \n",
       "3        18          Conner Mantz          Mantz, Conner            28      M   \n",
       "4        39          Muktar Edris          Edris, Muktar            31      M   \n",
       "\n",
       "      City StateAbbrev StateName  Zip CountryOfResAbbrev  \\\n",
       "0  Eldoret         NaN       NaN  NaN                KEN   \n",
       "1      NaN         NaN       NaN  NaN                TAN   \n",
       "2      NaN         NaN       NaN  NaN                KEN   \n",
       "3      NaN         NaN       NaN  NaN                USA   \n",
       "4      NaN         NaN       NaN  NaN                ETH   \n",
       "\n",
       "           CountryOfResName CountryOfCtzAbbrev          CountryOfCtzName  \\\n",
       "0                     Kenya                KEN                     Kenya   \n",
       "1                  Tanzania                TAN                  Tanzania   \n",
       "2                     Kenya                KEN                     Kenya   \n",
       "3  United States of America                USA  United States of America   \n",
       "4                  Ethiopia                ETH                  Ethiopia   \n",
       "\n",
       "  OfficialTime  RankOverall  RankOverGender  RankOverDivision EventGroup  \\\n",
       "0      2:04:45            1               1               1.0    Runners   \n",
       "1      2:05:04            2               2               2.0    Runners   \n",
       "2      2:05:04            3               3               3.0    Runners   \n",
       "3      2:05:08            4               4               4.0    Runners   \n",
       "4      2:05:59            5               5               5.0    Runners   \n",
       "\n",
       "  SubGroupLabel SubGroup  \n",
       "0           NaN      NaN  \n",
       "1           NaN      NaN  \n",
       "2           NaN      NaN  \n",
       "3           NaN      NaN  \n",
       "4           NaN      NaN  "
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#1\n",
    "bm = pd.read_csv(\"Boston2025_results.csv\" ,encoding='latin-1')\n",
    "bm.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "2a6032be-66ba-49ab-bb6f-ac46c2d4b057",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BibNumber              object\n",
       "FullName               object\n",
       "SortName               object\n",
       "AgeOnRaceDay            int64\n",
       "Gender                 object\n",
       "City                   object\n",
       "StateAbbrev            object\n",
       "StateName              object\n",
       "Zip                    object\n",
       "CountryOfResAbbrev     object\n",
       "CountryOfResName       object\n",
       "CountryOfCtzAbbrev     object\n",
       "CountryOfCtzName       object\n",
       "OfficialTime           object\n",
       "RankOverall             int64\n",
       "RankOverGender          int64\n",
       "RankOverDivision      float64\n",
       "EventGroup             object\n",
       "SubGroupLabel          object\n",
       "SubGroup               object\n",
       "dtype: object"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bm.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "ad654d8b-257c-4f8c-ba59-ebe3e25fa52a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def HoursToMinutes(hours):\n",
    "    ''' This function converts hours to minutes'''\n",
    "    x = hours.split(':')\n",
    "    first = int(x[0])\n",
    "    second = int(x[1])\n",
    "    third = float(x[2])\n",
    "    \n",
    "    first = first * 60 \n",
    "    second = second\n",
    "    third = third/60\n",
    "    \n",
    "    \n",
    "    return first + second + third"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "01f6c5c6-f9a5-4ed0-bb7b-5ff2acfcee65",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2:04:45'"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "example = bm[\"OfficialTime\"][0]\n",
    "#example = example.split(':')\n",
    "int(example[0])\n",
    "example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "4d1eeb87-9642-427c-b91a-8c2809153dc5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "124.75"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "HoursToMinutes(example)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "aa2ac3c2-17c0-4e23-b746-551f99058e03",
   "metadata": {},
   "outputs": [],
   "source": [
    "bm[\"OfficialTime\"] = bm[\"OfficialTime\"].apply(HoursToMinutes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "5580f9d9-9fa7-49a4-bb1c-6276305ad49f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The mean/average time it took for everyone in general for this marathon was 223 minutes.\n"
     ]
    }
   ],
   "source": [
    "#bm.head(1)\n",
    "#2\n",
    "print(f\"The mean/average time it took for everyone in general for this marathon was {round(bm[\"OfficialTime\"].mean())} minutes.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "0c7ee543-978a-4d96-b9f8-df6a925dbec8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The average time for males in minutes was 213.51701020260342 minutes.\n"
     ]
    }
   ],
   "source": [
    "#3\n",
    "bm_male = bm.loc[bm[\"Gender\"] == \"M\"]\n",
    "print(f\"The average time for males in minutes was {bm_male[\"OfficialTime\"].mean()} minutes.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "02889cda-101d-43e6-9ba6-c2dc4645d41e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The average time for females in minutes was 236.03990324339057 minutes.\n"
     ]
    }
   ],
   "source": [
    "#4\n",
    "bm_female = bm.loc[bm[\"Gender\"] == \"F\"]\n",
    "print(f\"The average time for females in minutes was {bm_female[\"OfficialTime\"].mean()} minutes.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "f0f0c4c1-c20a-4ebe-87a7-f79f911e2f7b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Number of runners')"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#5\n",
    "plt.hist(bm_male[\"OfficialTime\"], bins = 5, alpha = 0.5, color = \"blue\", label = \"Male Times in minutes\")\n",
    "plt.hist(bm_female[\"OfficialTime\"], bins = 5, alpha = 0.5, color = \"red\", label = \"Female Times in minutes\")\n",
    "plt.xlabel(\"Minutes\")\n",
    "plt.ylabel(\"Number of runners\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f04d28a-18c9-4f79-8a51-79116a3a8e1e",
   "metadata": {},
   "source": [
    "6)\n",
    "The distribution difference between males and females tell us that there is a difference between their times, with males usually finishing before females. But it isn't too drastic. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "f786b747-46ee-4924-9983-e96b61a047d5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The 90th percentile for female offical time is 301.39 minutes.\n"
     ]
    }
   ],
   "source": [
    "#7\n",
    "print(f\"The 90th percentile for female offical time is {round(bm_female[\"OfficialTime\"].quantile(0.90),2)} minutes.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0648912a-8fc4-4039-808c-cfbfb55375fc",
   "metadata": {},
   "source": [
    "8. Summary statistics for age groups between ages 50 and 54:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "8b4a5893-f0f8-4d2a-a6e3-5fc66b43af28",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BibNumber</th>\n",
       "      <th>FullName</th>\n",
       "      <th>SortName</th>\n",
       "      <th>AgeOnRaceDay</th>\n",
       "      <th>Gender</th>\n",
       "      <th>City</th>\n",
       "      <th>StateAbbrev</th>\n",
       "      <th>StateName</th>\n",
       "      <th>Zip</th>\n",
       "      <th>CountryOfResAbbrev</th>\n",
       "      <th>CountryOfResName</th>\n",
       "      <th>CountryOfCtzAbbrev</th>\n",
       "      <th>CountryOfCtzName</th>\n",
       "      <th>OfficialTime</th>\n",
       "      <th>RankOverall</th>\n",
       "      <th>RankOverGender</th>\n",
       "      <th>RankOverDivision</th>\n",
       "      <th>EventGroup</th>\n",
       "      <th>SubGroupLabel</th>\n",
       "      <th>SubGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>436</th>\n",
       "      <td>613</td>\n",
       "      <td>Juan Carlos Cardona</td>\n",
       "      <td>Cardona, Juan Carlos</td>\n",
       "      <td>50</td>\n",
       "      <td>M</td>\n",
       "      <td>La Ceja</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0550</td>\n",
       "      <td>COL</td>\n",
       "      <td>Colombia</td>\n",
       "      <td>COL</td>\n",
       "      <td>Colombia</td>\n",
       "      <td>155.133333</td>\n",
       "      <td>437</td>\n",
       "      <td>401</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Runners</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    BibNumber             FullName              SortName  AgeOnRaceDay Gender  \\\n",
       "436       613  Juan Carlos Cardona  Cardona, Juan Carlos            50      M   \n",
       "\n",
       "        City StateAbbrev StateName   Zip CountryOfResAbbrev CountryOfResName  \\\n",
       "436  La Ceja         NaN       NaN  0550                COL         Colombia   \n",
       "\n",
       "    CountryOfCtzAbbrev CountryOfCtzName  OfficialTime  RankOverall  \\\n",
       "436                COL         Colombia    155.133333          437   \n",
       "\n",
       "     RankOverGender  RankOverDivision EventGroup SubGroupLabel SubGroup  \n",
       "436             401               1.0    Runners           NaN      NaN  "
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bm_age = bm[(bm[\"AgeOnRaceDay\"]>49) & (bm[\"AgeOnRaceDay\"]<55)]\n",
    "bm_age.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "37ef2dbb-f115-4086-aa2a-1ebcfe1a4e22",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AgeOnRaceDay</th>\n",
       "      <th>OfficialTime</th>\n",
       "      <th>RankOverall</th>\n",
       "      <th>RankOverGender</th>\n",
       "      <th>RankOverDivision</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1304.000000</td>\n",
       "      <td>1304.000000</td>\n",
       "      <td>1304.000000</td>\n",
       "      <td>1304.000000</td>\n",
       "      <td>1303.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>51.585123</td>\n",
       "      <td>246.602019</td>\n",
       "      <td>19472.060583</td>\n",
       "      <td>7373.911043</td>\n",
       "      <td>652.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.364091</td>\n",
       "      <td>38.419807</td>\n",
       "      <td>4927.387282</td>\n",
       "      <td>2668.421836</td>\n",
       "      <td>376.28801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>50.000000</td>\n",
       "      <td>173.733333</td>\n",
       "      <td>2950.000000</td>\n",
       "      <td>158.000000</td>\n",
       "      <td>1.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>50.000000</td>\n",
       "      <td>221.287500</td>\n",
       "      <td>16196.500000</td>\n",
       "      <td>5539.750000</td>\n",
       "      <td>326.50000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>51.000000</td>\n",
       "      <td>234.408333</td>\n",
       "      <td>19226.500000</td>\n",
       "      <td>7262.000000</td>\n",
       "      <td>652.00000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>53.000000</td>\n",
       "      <td>261.116667</td>\n",
       "      <td>23075.500000</td>\n",
       "      <td>9363.250000</td>\n",
       "      <td>977.50000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>54.000000</td>\n",
       "      <td>424.966667</td>\n",
       "      <td>28409.000000</td>\n",
       "      <td>12230.000000</td>\n",
       "      <td>1303.00000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       AgeOnRaceDay  OfficialTime   RankOverall  RankOverGender  \\\n",
       "count   1304.000000   1304.000000   1304.000000     1304.000000   \n",
       "mean      51.585123    246.602019  19472.060583     7373.911043   \n",
       "std        1.364091     38.419807   4927.387282     2668.421836   \n",
       "min       50.000000    173.733333   2950.000000      158.000000   \n",
       "25%       50.000000    221.287500  16196.500000     5539.750000   \n",
       "50%       51.000000    234.408333  19226.500000     7262.000000   \n",
       "75%       53.000000    261.116667  23075.500000     9363.250000   \n",
       "max       54.000000    424.966667  28409.000000    12230.000000   \n",
       "\n",
       "       RankOverDivision  \n",
       "count        1303.00000  \n",
       "mean          652.00000  \n",
       "std           376.28801  \n",
       "min             1.00000  \n",
       "25%           326.50000  \n",
       "50%           652.00000  \n",
       "75%           977.50000  \n",
       "max          1303.00000  "
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bm_age_females = bm_age.loc[bm_age[\"Gender\"]==\"F\"]\n",
    "bm_age_females.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "d2824551-1cb3-4697-963f-f96ee94b9488",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AgeOnRaceDay</th>\n",
       "      <th>OfficialTime</th>\n",
       "      <th>RankOverall</th>\n",
       "      <th>RankOverGender</th>\n",
       "      <th>RankOverDivision</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1996.000000</td>\n",
       "      <td>1996.000000</td>\n",
       "      <td>1996.000000</td>\n",
       "      <td>1996.000000</td>\n",
       "      <td>1996.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>51.753507</td>\n",
       "      <td>219.967218</td>\n",
       "      <td>13720.412826</td>\n",
       "      <td>9220.566132</td>\n",
       "      <td>998.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.412924</td>\n",
       "      <td>39.928770</td>\n",
       "      <td>7143.158402</td>\n",
       "      <td>3555.439966</td>\n",
       "      <td>576.339888</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>50.000000</td>\n",
       "      <td>155.133333</td>\n",
       "      <td>437.000000</td>\n",
       "      <td>401.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>50.000000</td>\n",
       "      <td>192.962500</td>\n",
       "      <td>7891.750000</td>\n",
       "      <td>6559.250000</td>\n",
       "      <td>499.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>52.000000</td>\n",
       "      <td>207.241667</td>\n",
       "      <td>12345.500000</td>\n",
       "      <td>8880.500000</td>\n",
       "      <td>998.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>53.000000</td>\n",
       "      <td>235.875000</td>\n",
       "      <td>19533.000000</td>\n",
       "      <td>12049.000000</td>\n",
       "      <td>1497.250000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>54.000000</td>\n",
       "      <td>380.750000</td>\n",
       "      <td>28372.000000</td>\n",
       "      <td>16084.000000</td>\n",
       "      <td>1996.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       AgeOnRaceDay  OfficialTime   RankOverall  RankOverGender  \\\n",
       "count   1996.000000   1996.000000   1996.000000     1996.000000   \n",
       "mean      51.753507    219.967218  13720.412826     9220.566132   \n",
       "std        1.412924     39.928770   7143.158402     3555.439966   \n",
       "min       50.000000    155.133333    437.000000      401.000000   \n",
       "25%       50.000000    192.962500   7891.750000     6559.250000   \n",
       "50%       52.000000    207.241667  12345.500000     8880.500000   \n",
       "75%       53.000000    235.875000  19533.000000    12049.000000   \n",
       "max       54.000000    380.750000  28372.000000    16084.000000   \n",
       "\n",
       "       RankOverDivision  \n",
       "count       1996.000000  \n",
       "mean         998.500000  \n",
       "std          576.339888  \n",
       "min            1.000000  \n",
       "25%          499.750000  \n",
       "50%          998.500000  \n",
       "75%         1497.250000  \n",
       "max         1996.000000  "
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bm_age_males = bm_age.loc[bm_age[\"Gender\"]==\"M\"]\n",
    "bm_age_males.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e9fda37-c136-4050-83b0-c34a526ae0c2",
   "metadata": {},
   "source": [
    "9. Box plots for age groups"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "992925e2-fd21-4f6c-9c22-6cc16b7447a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Time in minutes')"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.boxplot(bm_age_males[\"OfficialTime\"])\n",
    "plt.title(\"Box Plot for Males; Age Groups\")\n",
    "plt.ylabel(\"Time in minutes\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "7143be00-b2ed-41d8-9ef1-0234129330ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Time in minutes')"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.boxplot(bm_age_females[\"OfficialTime\"])\n",
    "plt.title(\"Box Plot for Feamles; Age Groups\")\n",
    "plt.ylabel(\"Time in minutes\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d996e8ca-4ae9-4370-81a1-3b3e095c8b2b",
   "metadata": {},
   "source": [
    "10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "af0dfd66-4ed6-40d7-b8ab-98f2c90d1566",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "28409"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(bm[\"CountryOfResAbbrev\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "0be0e56b-5f9b-4576-a842-32e77c8e1591",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "28409"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(bm[\"CountryOfCtzAbbrev\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "f9a5080d-4f25-47f1-b9ea-8509d9f368a5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "19056"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bm_usa = bm[bm[\"CountryOfResAbbrev\"] == \"USA\"]\n",
    "len(bm_usa)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "b2568fca-0eba-4a79-b3c0-20a1df51e14b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BibNumber</th>\n",
       "      <th>FullName</th>\n",
       "      <th>SortName</th>\n",
       "      <th>AgeOnRaceDay</th>\n",
       "      <th>Gender</th>\n",
       "      <th>City</th>\n",
       "      <th>StateAbbrev</th>\n",
       "      <th>StateName</th>\n",
       "      <th>Zip</th>\n",
       "      <th>CountryOfResAbbrev</th>\n",
       "      <th>CountryOfResName</th>\n",
       "      <th>CountryOfCtzAbbrev</th>\n",
       "      <th>CountryOfCtzName</th>\n",
       "      <th>OfficialTime</th>\n",
       "      <th>RankOverall</th>\n",
       "      <th>RankOverGender</th>\n",
       "      <th>RankOverDivision</th>\n",
       "      <th>EventGroup</th>\n",
       "      <th>SubGroupLabel</th>\n",
       "      <th>SubGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>18</td>\n",
       "      <td>Conner Mantz</td>\n",
       "      <td>Mantz, Conner</td>\n",
       "      <td>28</td>\n",
       "      <td>M</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>USA</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>USA</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>125.133333</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Runners</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  BibNumber      FullName       SortName  AgeOnRaceDay Gender City  \\\n",
       "3        18  Conner Mantz  Mantz, Conner            28      M  NaN   \n",
       "\n",
       "  StateAbbrev StateName  Zip CountryOfResAbbrev          CountryOfResName  \\\n",
       "3         NaN       NaN  NaN                USA  United States of America   \n",
       "\n",
       "  CountryOfCtzAbbrev          CountryOfCtzName  OfficialTime  RankOverall  \\\n",
       "3                USA  United States of America    125.133333            4   \n",
       "\n",
       "   RankOverGender  RankOverDivision EventGroup SubGroupLabel SubGroup  \n",
       "3               4               4.0    Runners           NaN      NaN  "
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bm_usa.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "id": "e99b42c3-e78e-49d6-935c-f4ee47d33557",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "56"
      ]
     },
     "execution_count": 194,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bm_states = bm_usa.groupby(\"StateAbbrev\")[[\"OfficialTime\"]].mean()\n",
    "len(bm_states)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "660752e5-b6b6-4737-b898-8d1b34b4ee8e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(bm_usa['CountryOfResAbbrev'] == \"USA\") == len(bm_usa)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "d221313e-daac-43a5-8e58-b56a3365d795",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(19056, 20)"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bm_usa.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "id": "80345542-237f-4e50-ae87-149f38549373",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OfficialTime</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>StateAbbrev</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>MA</th>\n",
       "      <td>251.356825</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NH</th>\n",
       "      <td>242.044088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PR</th>\n",
       "      <td>237.560606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>RI</th>\n",
       "      <td>234.786352</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FL</th>\n",
       "      <td>232.446714</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             OfficialTime\n",
       "StateAbbrev              \n",
       "MA             251.356825\n",
       "NH             242.044088\n",
       "PR             237.560606\n",
       "RI             234.786352\n",
       "FL             232.446714"
      ]
     },
     "execution_count": 196,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bm_states.sort_values(\"OfficialTime\", ascending = False).head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "id": "f4c19273-f9b7-438f-bf9e-7e21fdd46d84",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The fastest state is WV (West Virginia) with the time of 197 minutes.\n",
      "The slowest state is MA (Massachusetts) with the time of 251 minutes.\n"
     ]
    }
   ],
   "source": [
    "#10\n",
    "us_states = [\n",
    "    \"AL \",\"AK \",\"AZ \",\"AR \",\"CA \",\"CO \",\"CT \",\"DE \",\"FL \",\"GA \",\n",
    "    \"HI \",\"ID \",\"IL \",\"IN \",\"IA \",\"KS \",\"KY \",\"LA \",\"ME \",\"MD \",\n",
    "    \"MA \",\"MI \",\"MN \",\"MS \",\"MO \",\"MT \",\"NE \",\"NV \",\"NH \",\"NJ \",\n",
    "    \"NM \",\"NY \",\"NC \",\"ND \",\"OH \",\"OK \",\"OR \",\"PA \",\"RI \",\"SC \",\n",
    "    \"SD \",\"TN \",\"TX \",\"UT \",\"VT \",\"VA \",\"WA \",\"WV \",\"WI \",\"WY \",\n",
    "    \"DC \" \n",
    "]\n",
    "\n",
    "\n",
    "bm_states = bm_usa[bm_usa[\"StateAbbrev\"].isin(us_states)]\n",
    "\n",
    "\n",
    "bm_states = bm_states.groupby(\"StateAbbrev\")[[\"OfficialTime\"]].mean()\n",
    "bm_states = bm_states.sort_values(\"OfficialTime\", ascending=False)\n",
    "print(f\"The fastest state is {bm_states.index[-1]}(West Virginia) with the time of {round(bm_states.iloc[-1,0])} minutes.\")\n",
    "print(f\"The slowest state is {bm_states.index[0]}(Massachusetts) with the time of {round(bm_states.iloc[0,0])} minutes.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "id": "698a9744-e594-4382-8564-7c2fc981ade6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>BibNumber</th>\n",
       "      <th>FullName</th>\n",
       "      <th>SortName</th>\n",
       "      <th>AgeOnRaceDay</th>\n",
       "      <th>Gender</th>\n",
       "      <th>City</th>\n",
       "      <th>StateAbbrev</th>\n",
       "      <th>StateName</th>\n",
       "      <th>Zip</th>\n",
       "      <th>CountryOfResAbbrev</th>\n",
       "      <th>CountryOfResName</th>\n",
       "      <th>CountryOfCtzAbbrev</th>\n",
       "      <th>CountryOfCtzName</th>\n",
       "      <th>OfficialTime</th>\n",
       "      <th>RankOverall</th>\n",
       "      <th>RankOverGender</th>\n",
       "      <th>RankOverDivision</th>\n",
       "      <th>EventGroup</th>\n",
       "      <th>SubGroupLabel</th>\n",
       "      <th>SubGroup</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2</td>\n",
       "      <td>John Korir</td>\n",
       "      <td>Korir, John</td>\n",
       "      <td>28</td>\n",
       "      <td>M</td>\n",
       "      <td>Eldoret</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>KEN</td>\n",
       "      <td>Kenya</td>\n",
       "      <td>KEN</td>\n",
       "      <td>Kenya</td>\n",
       "      <td>124.750000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Runners</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>7</td>\n",
       "      <td>Alphonce Felix Simbu</td>\n",
       "      <td>Simbu, Alphonce Felix</td>\n",
       "      <td>33</td>\n",
       "      <td>M</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>TAN</td>\n",
       "      <td>Tanzania</td>\n",
       "      <td>TAN</td>\n",
       "      <td>Tanzania</td>\n",
       "      <td>125.066667</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Runners</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>Cybrian Kotut</td>\n",
       "      <td>Kotut, Cybrian</td>\n",
       "      <td>32</td>\n",
       "      <td>M</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>KEN</td>\n",
       "      <td>Kenya</td>\n",
       "      <td>KEN</td>\n",
       "      <td>Kenya</td>\n",
       "      <td>125.066667</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3.0</td>\n",
       "      <td>Runners</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>18</td>\n",
       "      <td>Conner Mantz</td>\n",
       "      <td>Mantz, Conner</td>\n",
       "      <td>28</td>\n",
       "      <td>M</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>USA</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>USA</td>\n",
       "      <td>United States of America</td>\n",
       "      <td>125.133333</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4.0</td>\n",
       "      <td>Runners</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>39</td>\n",
       "      <td>Muktar Edris</td>\n",
       "      <td>Edris, Muktar</td>\n",
       "      <td>31</td>\n",
       "      <td>M</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>ETH</td>\n",
       "      <td>Ethiopia</td>\n",
       "      <td>ETH</td>\n",
       "      <td>Ethiopia</td>\n",
       "      <td>125.983333</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>5.0</td>\n",
       "      <td>Runners</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  BibNumber              FullName               SortName  AgeOnRaceDay Gender  \\\n",
       "0         2            John Korir            Korir, John            28      M   \n",
       "1         7  Alphonce Felix Simbu  Simbu, Alphonce Felix            33      M   \n",
       "2         4         Cybrian Kotut         Kotut, Cybrian            32      M   \n",
       "3        18          Conner Mantz          Mantz, Conner            28      M   \n",
       "4        39          Muktar Edris          Edris, Muktar            31      M   \n",
       "\n",
       "      City StateAbbrev StateName  Zip CountryOfResAbbrev  \\\n",
       "0  Eldoret         NaN       NaN  NaN                KEN   \n",
       "1      NaN         NaN       NaN  NaN                TAN   \n",
       "2      NaN         NaN       NaN  NaN                KEN   \n",
       "3      NaN         NaN       NaN  NaN                USA   \n",
       "4      NaN         NaN       NaN  NaN                ETH   \n",
       "\n",
       "           CountryOfResName CountryOfCtzAbbrev          CountryOfCtzName  \\\n",
       "0                     Kenya                KEN                     Kenya   \n",
       "1                  Tanzania                TAN                  Tanzania   \n",
       "2                     Kenya                KEN                     Kenya   \n",
       "3  United States of America                USA  United States of America   \n",
       "4                  Ethiopia                ETH                  Ethiopia   \n",
       "\n",
       "   OfficialTime  RankOverall  RankOverGender  RankOverDivision EventGroup  \\\n",
       "0    124.750000            1               1               1.0    Runners   \n",
       "1    125.066667            2               2               2.0    Runners   \n",
       "2    125.066667            3               3               3.0    Runners   \n",
       "3    125.133333            4               4               4.0    Runners   \n",
       "4    125.983333            5               5               5.0    Runners   \n",
       "\n",
       "  SubGroupLabel SubGroup  \n",
       "0           NaN      NaN  \n",
       "1           NaN      NaN  \n",
       "2           NaN      NaN  \n",
       "3           NaN      NaN  \n",
       "4           NaN      NaN  "
      ]
     },
     "execution_count": 225,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bm.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "id": "a578f472-5fe6-42ba-8689-502d87af4efd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>OfficialTime</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>StateAbbrev</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>CA</th>\n",
       "      <td>218.594905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MA</th>\n",
       "      <td>251.356825</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             OfficialTime\n",
       "StateAbbrev              \n",
       "CA             218.594905\n",
       "MA             251.356825"
      ]
     },
     "execution_count": 232,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#11\n",
    "eleven = bm_usa[bm_usa[\"StateAbbrev\"].isin([\"CA \", \"MA \"])]\n",
    "eleven.groupby(\"StateAbbrev\")[[\"OfficialTime\"]].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aec36ce3-451d-49df-92c3-e87e0c8ae094",
   "metadata": {},
   "source": [
    "We can see that on average, Californians finish faster than Massachusetts runners, on average the difference is 33 whole minutes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c36030d2-68a1-443a-b636-a115cbea1809",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
